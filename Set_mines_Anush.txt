#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int r, c,num_mines;


void set_mines()
{
int number[r][c];
    for (int i = 0; i < r; i++)
    {
        for (int j = 0; j < c; j++)
        {
            number[i][j] = 0;
        }
    }
    string mines[r][c];
    for (int i = 0; i < num_mines;)
    {
        int l = rand() % r;
        int m = rand() % c;
        if (mines[l][m] == "$")
            continue;
        else
        {
            i++;
            mines[l][m] = "$";
            number[l][m]=-1;
            
            if(l==0&&m==0) // checking top left corner
            { 
	            
	            number[1][0]+=1;
	            
	            number[1][1]+=1;
	            
	            number[0][1]+=1;
            }
            else if(l==0&&m==c-1) // checking top right corner
            { 
	            number[0][c-2]+=1;
	            number[1][c-2]+=1;
	            number[1][c-1]+=1;
	        }
            else if(l==r-1&&m==0) // checking bottom left corner
            { 
	            number[r-2][0]+=1;
	            number[r-2][1]+=1;
	            number[r-1][1]+=1;
            }
            else if(l==r-1&&m==c-1) // checking bottom right corner
            { 
	            number[r-1][c-2]+=1;
	            number[r-2][c-2]+=1;
	            number[r-2][c-1]+=1;
            }
            else if(l==0) // checking upper boundary tiles
            { 
	            number[l][m-1]+=1;
	            number[l][m+1]+=1;
	            number[l+1][m-1]+=1;
	            number[l+1][m]+=1;
	            number[l+1][m+1]+=1;
	         }
            else if(m==0) // checking left boundary tiles
            { 
	            number[l-1][m]+=1;
	            number[l-1][m+1]+=1;
	            number[l][m+1]+=1;
	            number[l+1][m]+=1;
	            number[l+1][m+1]+=1;
            }
            else if(m==c-1) // checking right boundary tiles
            { 
	            number[l-1][m-1]+=1;
	            number[l-1][m]+=1;
	            number[l][m-1]+=1;
	            number[l+1][m-1]+=1;
	            number[l+1][m]+=1;
	        
            }
            else if(l==r-1) // checking lower boundary tiles
            { 
	            number[l-1][m-1]+=1;
	            number[l-1][m]+=1;
	            number[l-1][m+1]+=1;
	            number[l][m-1]+=1;
	            number[l][m+1]+=1;

            }
            else
            {
                number[l-1][m-1]+=1;
                number[l-1][m]+=1;
                number[l-1][m+1]+=1;
                number[l][m-1]+=1;
                number[l][m+1]+=1;
                number[l+1][m-1]+=1;
                number[l+1][m]+=1;
                number[l+1][m+1]+=1;
            }
      
            
            // if (num_count[x - 1][y] == 0)
            // {
            //     num_count[x - 1][y] = 1;
            // }
            // if (num_count[x + 1][y] ==0)
            // {
            //     num_count[x + 1][y] = 1;
            // }
            // if (num_count[x][y - 1] == 0)
            // {
            //     num_count[x][y - 1] = 1;
            // }
            // if (num_count[x][y + 1] == 0)
            // {
            //     num_count[x][y + 1] = 1;
            // }
            // if (num_count[x - 1][y + 1] == 0)
            // {
            //     num_count[x - 1][y + 1] = 1;
            // }
            // if (num_count[x + 1][y - 1] == 0)
            // {
            //     num_count[x + 1][y - 1] = 1;
            // }
            // if (num_count[x - 1][y - 1] == 0)
            // {
            //     num_count[x - 1][y - 1] = 1;
            // }
            // if (num_count[x + 1][y + 1] == 0)
            // {
            //     num_count[x + 1][y + 1] = 1;
            // }
            
        }
    }

    for (int i = 0; i < r; i++)
    {
        for (int j = 0; j < c; j++)
        {
            if (mines[i][j] == "$")
                {
                    cout << " " << mines[i][j] << " ";
                    number[i][j]=-1;
                }
            else
                cout << " "
                     << "*"
                     << " ";
        }
        cout << endl;
    }

    for (int i = 0; i < r; i++)
    {
        for (int j = 0; j < c; j++)
        {
            cout <<number[i][j] << "\t\t\t";
        }
        cout << endl;
    }
}

int main()
{
    srand(time(0));
    
    cout << "enter the number of rows: ";
    cin >> r;
    cout << "enter the number of columns: ";
    cin >> c;
    cout << "enter the number of mines: "<<endl;
    cin >> num_mines;
    set_mines();
    
    return 0;
}